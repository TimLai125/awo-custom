# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2015 Probuse Counsulting services pvt.ltd (<http://www.probuse.com>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from openerp.osv import fields, osv
from openerp.tools.translate import _

    
    
    
class sale_order(osv.osv):
    """  """
    _inherit = "sale.order"
    
    def _prepare_order_line_procurement(self, cr, uid, order, line, group_id=False, context=None):
        """ create procurement here we add just two fields add quant_id and lot_id"""
#        super(sale_order,self)._prepare_order_line_procurement(cr, uid, order, line, group_id, context=context)
        date_planned = self._get_date_planned(cr, uid, order, line, order.date_order, context=context)
        res = {
            'name': line.name,
            'origin': order.name,
            'date_planned': date_planned,
            'product_id': line.product_id.id,
            'product_qty': line.product_uom_qty,
            'product_uom': line.product_uom.id,
            'product_uos_qty': (line.product_uos and line.product_uos_qty) or line.product_uom_qty,
            'product_uos': (line.product_uos and line.product_uos.id) or line.product_uom.id,
            'company_id': order.company_id.id,
            'group_id': group_id,
            'invoice_state': (order.order_policy == 'picking') and '2binvoiced' or 'none',
            'sale_line_id': line.id,
            'quant_id':line.quant_id.id,
            'lot_id':line.lot_id.id,
        }
        return res 
        
class procurement_order(osv.osv):
    """  """
    _inherit = "procurement.order"
    _columns = {
        'quant_id': fields.many2one('stock.quant',string="Sale line quant",help=""),
        'lot_id': fields.many2one('stock.production.lot',string="Stock Production lot",help=""),
    }
    
    def _run_move_create(self, cr, uid, procurement, context=None):
        """ move are create based on procurment """
        res = super(procurement_order,self)._run_move_create(cr, uid, procurement, context)
        res.update({'quant_id':procurement.quant_id.id,'lot_id':procurement.lot_id.id})
        return res

class sale_order_line(osv.osv):
    """ """

    _inherit = "sale.order.line"
    _description = " "

    _columns = {
        'quant_id': fields.many2one('stock.quant',string="Sale line quant",help=""),
        'lot_id': fields.many2one('stock.production.lot',string="Stock Production lot",help=""),
    }

    def onchange_quant(self, cr, uid, ids, quant_id):
        """ On change of quant_id finds lot_id(serial no)
        @param quant_id: Quant id
        @return: Dictionary of values
        """
        result = {}
        if quant_id:
            quant = self.pool.get('stock.quant').browse(cr,uid,quant_id)
            result = {
                'lot_id': quant.lot_id.id
            }
        return {'value': result}


class stock_move(osv.osv):
    _inherit = 'stock.move'
    _columns = {
        'quant_id': fields.many2one('stock.quant',string="Sale line quant",help=""),
        'lot_id': fields.many2one('stock.production.lot',string="Stock Production lot",help=""),
    }
    
    
    def action_assign(self, cr, uid, ids, context=None):
        """ Checks the product type and accordingly writes the state.
        """
        context = context or {}
        quant_obj = self.pool.get("stock.quant")
        to_assign_moves = []
        main_domain = {}
        todo_moves = []
        operations = set()
        for move in self.browse(cr, uid, ids, context=context):
            if move.state not in ('confirmed', 'waiting', 'assigned'):
                continue
            if move.location_id.usage in ('supplier', 'inventory', 'production'):
                to_assign_moves.append(move.id)
                #in case the move is returned, we want to try to find quants before forcing the assignment
                if not move.origin_returned_move_id:
                    continue
            if move.product_id.type == 'consu':
                to_assign_moves.append(move.id)
                continue
            else:
                todo_moves.append(move)

                #we always keep the quants already assigned and try to find the remaining quantity on quants not assigned only
                main_domain[move.id] = [('reservation_id', '=', False), ('qty', '>', 0)]

                #if the move is preceeded, restrict the choice of quants in the ones moved previously in original move
                ancestors = self.find_move_ancestors(cr, uid, move, context=context)
                if move.state == 'waiting' and not ancestors:
                    #if the waiting move hasn't yet any ancestor (PO/MO not confirmed yet), don't find any quant available in stock
                    main_domain[move.id] += [('id', '=', False)]
                elif ancestors:
                    main_domain[move.id] += [('history_ids', 'in', ancestors)]

                #if the move is returned from another, restrict the choice of quants to the ones that follow the returned move
                if move.origin_returned_move_id:
                    main_domain[move.id] += [('history_ids', 'in', move.origin_returned_move_id.id)]
                for link in move.linked_move_operation_ids:
                    operations.add(link.operation_id)
        # Check all ops and sort them: we want to process first the packages, then operations with lot then the rest
        operations = list(operations)
        operations.sort(key=lambda x: ((x.package_id and not x.product_id) and -4 or 0) + (x.package_id and -2 or 0) + (x.lot_id and -1 or 0))
        for ops in operations:
            #first try to find quants based on specific domains given by linked operations
            for record in ops.linked_move_operation_ids:
                move = record.move_id
                if move.id in main_domain:
                    domain = main_domain[move.id] + self.pool.get('stock.move.operation.link').get_specific_domain(cr, uid, record, context=context)
                    qty = record.qty
                    if qty:
                        quantt = [(record.move_id.quant_id, record.move_id.quant_id.qty)]#***
                        quants = quant_obj.quants_get_prefered_domain(cr, uid, ops.location_id, move.product_id, qty, domain=domain, prefered_domain_list=[], restrict_lot_id=move.restrict_lot_id.id, restrict_partner_id=move.restrict_partner_id.id, context=context)
                        quant_obj.quants_reserve(cr, uid, quantt, move, record, context=context)
        for move in todo_moves:
            if move.linked_move_operation_ids:
                continue
            #then if the move isn't totally assigned, try to find quants without any specific domain
            if move.state != 'assigned':
                qty_already_assigned = move.reserved_availability
                qty = move.product_qty - qty_already_assigned
                quantt = [(move.quant_id, qty)]#***
                quants = quant_obj.quants_get_prefered_domain(cr, uid, move.location_id, move.product_id, qty, domain=main_domain[move.id], prefered_domain_list=[], restrict_lot_id=move.restrict_lot_id.id, restrict_partner_id=move.restrict_partner_id.id, context=context)
                a = self.pool.get('stock.move').read(cr,uid,move.id)
                quant_obj.quants_reserve(cr, uid, quantt, move, context=context)

        #force assignation of consumable products and incoming from supplier/inventory/production
        if to_assign_moves:
            self.force_assign(cr, uid, to_assign_moves, context=context)

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
